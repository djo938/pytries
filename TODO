TODO
	DEFINITION
		-a node               : a node always contains a key string, can have 0 to infinite number of child (another node), can have 0 or 1 parent (another node), and can store a value or not
		-a child node         : a child node is a standard node, but the node reference stored in the variable parent point to another node that store a reference of the current node in a child list
		-a parent node        : each node reference stored in the variable childs point to some nodes who store the reference of the current node in the variable parent
		-a value node         : a node that contains a value (self.value != None)
		-an intermediate node : a node with at least one child (len(self.childs) > 0)
		-a non value node     : it is an intermediate node without any value and with at least 2 childs (self.value == None and len(self.childs) > 1)
		-an end node          : it is a value node without any childs (self.value != None and len(self.childs) == 0)

		-a string          : an array of caracters, the array can be empty (no definition about caracter is needed)
		-a key string      : part of a path string stored in a tries node, a key string must always at least 1 caracter, except for the root node
		-a path string     : a path string is a string composed with the contatenation of 1 or more linked key string.  The node that contains the last part of the path string is the node linked to this path
		-a prefix string   : a prefix string is a prefix of a path string
		-a complete string : a string is a complete string iff there is a node in the tree such as the concatenation of all the parent key string with the key string of this node give the original string
		    #redondance avec path string, faire un mix ? complete path string (et donc incomplete path string pour prefix string ?)
		-a irrelevant string : not a complete string nor a incomplete string
		-a value string    : it is a complete string, and the node found contains a value
		-a final string    : it is a complete string, and the node found does not have any child

    ELEMENTARY TREE PROPERTIES (all this properties must always be verified to get a valid tree)
        INSERT
            -every inserted key are in the tree
            -each key appears only once, no redundant path
            -every value node come from the insertion of a key
            -the value of a node corresponds to the path string of the insertion
            -if the tree hold only one value, the root child can't have any child
            
        CHILD (end node = no child)
            -an intermediate node without value must have more than 1 child (or its existence is useless)
            -every end node are value node, except an empty root
        
        KEY STRING
            -only the root node can have the empty string as key
            -every no root node must have a key length of more than 0
        
        PARENT
            -a child node must have its parent in the variable parent
            -there is always only one root
            -no cycle is allowed

	TEST (tries)
        -UNIT TEST
            -make a default class with all the elementary test (see above)
                -a default class inherited from object
                    -then a new class inherited from default class AND testinstance
	                    -to test the specifig case of the test
	                        -insert class
	                        -remove class
	                        -...
	            -make a subclass for 
	                -insert test
	                -remove test
	                    -test each case on/without the root
	                -traversal test
                    -other ?
        
            -limite case on the root node (insert the test in the convenient testcase, or create new)
                -a non empty root that become again an empty root
                -test des cas limite sur chaine vide
                    quand arbre vide
                    quand arbre remplie avec racine pleine
                    (autre ?)

            -test insert avec des value None 

        -random insert/remove/search/...
            -ensuite la structure de l'arbre doit etre coherent
                -pas de noeud intermediate avec 1 seul fils
                -toutes les chaines inserees doivent pointer sur un value node  
                    -et inverse, pas de value node sans chaine inseree
                -seul le root peut avoir une chaine vide
                -insertion de chaine vide

    TEST (multitries)
        construire un arbre a plusieurs niveau avec des chaines communes au debut et de moins en moins vers la fin
        toto tata titi
        toto tata plop
        toto plap plip

	IMPROVMENT
		-improve the documention outside and inside each class, function, piece of code, ...
			-rename if necessary (don't be afraid)
		-transformer les inner function en fonction de classe avec un prefixe _

	NEW FEATURE
		-create a setup.py
		-create a example.py

	BUG (there is probably some bugs, fint them !!! )
		-

	NEEDED (not know if present or not)
		-add/remove/update

		-il devrait y avoir moyen de combiner les methodes ci dessous pour recuperer les infos en un seul lookup, afin d'eviter de faire 5 fois la mÃªme recherche
			-faire une classe lookup qui stocke toutes les informations ci dessous (enfin toute celle accessible en lookup)
			-peu etre qu'une classe est too much

		-from a string of any size (even 0 or 1), be able to get these information
			-isACompleteString(str)
			-isAValueString(str)
			-isAFinalString(str)
	
			-getNextNodeFromString(str) : return the next node that contains a complete string in the tree from the given string prefix
				The looking process is always from top to bottom
				return None if the string is not the prefix of anything

			-getEveryValueNodeFromString(str) : return a list of nodes with a value that have the str as prefix key
				-the given str is maybe a value string, then add its corresponding node in the list

